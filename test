<form action="{{ route('checkout.process', ['cart' => $cart->token]) }}" method="POST">

<?php

namespace App\Http\Controllers;

use App\Http\Requests\Checkout\StoreCustomerDetailsRequest;
use App\Models\Cart;
use App\Models\Order;
use Stripe\Checkout\Session;
use Stripe\Stripe;
use Illuminate\Http\Request;
use App\Http\Requests\UpdateOrderRequest;

class CheckoutController extends Controller
{
   
    public function process(UpdateOrderRequest $request, Cart $cart)
    {
        // Generate a unique reference for the order
        $reference = 'ORD-' . strtoupper(uniqid());

        // Retrieve customer data from the request
        $customerData = $request->input('customer');

        // Create or update the Order based on the Cart
        $order = Order::updateOrCreate(
            ['cart_id' => $cart->id],
            [
                'reference' => $reference,
                'customer' => $customerData,
                'total' => $cart->total(),
                'status' => Order::STATUS_PENDING,
            ]
        );

        // Add or update Order Items
        foreach ($cart->items as $item) {
            $order->items()->updateOrCreate(
                ['ticket_id' => $item->ticket_id],
                [
                    'quantity' => $item->quantity,
                    'price' => $item->ticket->price, // Fetching price from the Ticket model
                ]
            );
        }

        if ($order->total == 0) {
            // If the order is free, set the status to 'completed' and redirect to customer details page
            $order->status = Order::STATUS_OK;
            $order->save();

            return redirect()->route('checkout.customer-details', ['cart' => $cart->token]);
        } else {
            // If the order is paid, proceed to Stripe
            $order->status = Order::STATUS_AWAITING_PAYMENT;
            $order->save();

            // Configure Stripe API
            Stripe::setApiKey(env('STRIPE_SECRET'));

            // Create Stripe Checkout session
            $session = Session::create([
                'payment_method_types' => ['card'],
                'line_items' => [
                    [
                        'price_data' => [
                            'currency' => 'usd',
                            'product_data' => [
                                'name' => 'Order #' . $order->id,
                            ],
                            'unit_amount' => $order->total * 100, // Total in cents
                        ],
                        'quantity' => 1,
                    ],
                ],
                'mode' => 'payment',
                'success_url' => route('checkout.success', ['cart' => $cart->token]),
                'cancel_url' => route('checkout.customer-details', ['cart' => $cart->token]),
            ]);

            // Save Stripe Session ID in Order
            $order->checkout_session_id = $session->id;
            $order->save();

            // Redirect to Stripe Checkout URL
            return redirect($session->url);
        }
    }

    public function formCustomer(Cart $cart)
    {
    }

    public function storeCustomer(StoreCustomerDetailsRequest $request, Cart $cart)
    {
    }

    public function success(Cart $cart)
    {
    }
}

public function index()
    {
        // Retrieve or create the cart
        $cart = Cart::firstOrCreateCart();
        
        // Retrieve the items associated with the cart
        $cartItems = CartItem::all();
    
        return view('cart.index', compact('cart', 'cartItems'));
    }
