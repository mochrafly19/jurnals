<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Order;
use Stripe\Stripe;
use Stripe\Webhook;
use Illuminate\Support\Facades\Log;
use Symfony\Component\HttpFoundation\Response;

class StripeWebhookController extends Controller
{
    public function handle(Request $request)
    {
        $payload = $request->getContent();
        $sigHeader = $request->header('Stripe-Signature');
        $endpointSecret = env('STRIPE_WEBHOOK_SECRET');

        try {
            $event = Webhook::constructEvent(
                $payload, $sigHeader, $endpointSecret
            );
        } catch (\UnexpectedValueException $e) {
            // Invalid payload
            Log::error('Invalid payload', ['error' => $e->getMessage()]);
            return response()->json(['error' => 'Invalid payload'], Response::HTTP_BAD_REQUEST);
        } catch (\Stripe\Exception\SignatureVerificationException $e) {
            // Invalid signature
            Log::error('Invalid signature', ['error' => $e->getMessage()]);
            return response()->json(['error' => 'Invalid signature'], Response::HTTP_BAD_REQUEST);
        }

        // Handle the event
        switch ($event->type) {
            case 'checkout.session.completed':
                $this->handlePaymentSuccess($event->data->object);
                break;

            case 'checkout.session.async_payment_failed':
            case 'payment_intent.payment_failed':
                $this->handlePaymentFailed($event->data->object);
                break;

            default:
                Log::info('Received unknown event type ' . $event->type);
                break;
        }

        return response()->json(['status' => 'success']);
    }

    protected function handlePaymentSuccess($session)
    {
        $order = Order::where('checkout_session_id', $session->id)->first();

        if ($order) {
            $order->status = Order::STATUS_OK;
            $order->save();
            Log::info("Order {$order->id} marked as paid.");
        } else {
            Log::warning("Order not found for checkout session id {$session->id}");
        }
    }

    protected function handlePaymentFailed($session)
    {
        $order = Order::where('checkout_session_id', $session->id)->first();

        if ($order) {
            $order->status = Order::STATUS_PAYMENT_FAILED; 
            $order->save();
            Log::error("Order {$order->id} payment failed.");
        } else {
            Log::warning("Order not found for checkout session id {$session->id}");
        }
    }
}

<?php

use App\Http\Controllers\CartController;
use App\Http\Controllers\CheckoutController;
use App\Http\Controllers\EventController;
use App\Http\Controllers\HomeController;
use App\Http\Controllers\StripeWebhookController;
use Illuminate\Support\Facades\Route;

Route::get('/', [HomeController::class, 'index'])->name('home');
Route::get('/cart', [CartController::class, 'index'])->name('cart.index');
Route::put('/cart/update', [CartController::class, 'update'])->name('cart.update');

Route::resource('events', EventController::class);

Route::prefix('checkout')->name('checkout.')->group(function () {
    Route::put('{cart:token}', [CheckoutController::class, 'process'])->name('process');
    Route::get('{cart:token}/customer-details', [CheckoutController::class, 'formCustomer'])->name('customer-details');
    Route::post('{cart:token}/customer-details', [CheckoutController::class, 'storeCustomer']);
    Route::get('{cart:token}/success', [CheckoutController::class, 'success'])->name('success');
});

Route::post('stripe/webhook', [StripeWebhookController::class, 'handle']);  
